# backend/app/schemas/submission.py

from pydantic import BaseModel, HttpUrl
from datetime import datetime

# --- Schemas for Orchestration Endpoint ---

class SubmissionBase(BaseModel):
    """Base schema with fields common to both creation and response."""
    image_gcs_url: HttpUrl
    ocr_text: str
    ai_feedback: str


class SubmissionCreate(SubmissionBase):
    """Schema for creating a new submission record in the database."""
    user_id: str
    problem_id: str


class SubmissionResponse(SubmissionBase):
    """Schema for the data returned to the frontend after a successful submission."""
    pass


class SubmissionInDBBase(SubmissionBase):
    """
    Schema representing a submission as it is stored in the database.
    Includes database-generated fields like id and submitted_at.
    """
    id: int
    user_id: str
    problem_id: str
    submitted_at: datetime

    model_config = {
        # This allows the Pydantic model to be created from an ORM model
        # (e.g., a SQLAlchemy model instance)
        "from_attributes": True
    }


# --- Schemas for individual service testing (can be kept or removed) ---

# --- Schemas for OCR Processing ---

class OCRRequest(BaseModel):
    """
    Schema for the request body of the OCR endpoint.
    It expects a valid GCS URL for the image.
    """
    image_gcs_url: str

    model_config = {
        "json_schema_extra": {
            "examples": [
                {
                    "image_gcs_url": "gs://your-bucket-name/path/to/image.jpg"
                }
            ]
        }
    }


class OCRResponse(BaseModel):
    """
    Schema for the response body of the OCR endpoint.
    It returns the extracted text.
    """
    ocr_text: str

# --- Schemas for AI Feedback Generation ---

class AIFeedbackRequest(BaseModel):
    """
    Schema for the request body of the AI feedback generation endpoint.
    It expects the OCR'd text from the user's submission.
    """
    ocr_text: str
    # In the future, we might add problem_id here to fetch the canonical solution
    # problem_id: str

class AIFeedbackResponse(BaseModel):
    """
    Schema for the response body of the AI feedback generation endpoint.
    It returns the feedback generated by the AI.
    """
    ai_feedback: str